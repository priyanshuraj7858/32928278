const express = require('express');
const axios = require('axios');
const app = express();

app.get('/api/blog-stats', async (req, res) => {
  try {
    const response = await axios.get('https://intent-kit-16.hasura.app/api/rest/blogs', {
      headers: {
        'x-hasura-admin-secret': '32qR4KmXOIpsGPQKMqEJHGJS27G5s7HdSKO3gdtQd2kv5e852SiYwWNfxkZOBuQ6'
      }
    });

    // Process data and perform analytics (Step 2)
    const analyticsData = processData(response.data);

    // Respond with analytics data (Step 3)
    res.json(analyticsData);
  } catch (error) {
    // Handle errors (Step 5)
    res.status(500).json({ error: 'An error occurred while fetching blog data.' });
  }
});

// Define a function to process data and perform analytics (Step 2)
function processData(data) {
  // Implement data processing and analytics using Lodash (Step 2)
}

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});
const _ = require('lodash');

function processData(data) {
  const totalBlogs = data.length;
  
  // Find the blog with the longest title
  const longestTitle = _.maxBy(data, 'title').title;
  
  // Count blogs with titles containing "privacy"
  const privacyBlogsCount = _.filter(data, blog => _.includes(_.toLower(blog.title), 'privacy')).length;
  
  // Create an array of unique blog titles
  const uniqueBlogTitles = _.uniqBy(data, 'title').map(blog => blog.title);
  
  return {
    totalBlogs,
    longestTitle,
    privacyBlogsCount,
    uniqueBlogTitles
  };
}
app.get('/api/blog-stats', async (req, res) => {
  try {
    const response = await axios.get('https://intent-kit-16.hasura.app/api/rest/blogs', {
      headers: {
        'x-hasura-admin-secret': '32qR4KmXOIpsGPQKMqEJHGJS27G5s7HdSKO3gdtQd2kv5e852SiYwWNfxkZOBuQ6'
      }
    });

    const analyticsData = processData(response.data);

    // Respond with analytics data in the required JSON format (Step 3)
    res.json({
      analytics: analyticsData
    });
  } catch (error) {
    res.status(500).json({ error: 'An error occurred while fetching blog data.' });
  }
});
app.get('/api/blog-search', (req, res) => {
  const query = req.query.query.toLowerCase();

  // Filter blogs based on the provided query (case-insensitive)
  const filteredBlogs = data.filter(blog => _.includes(_.toLower(blog.title), query));

  res.json({
    results: filteredBlogs
  });
});


app.get('/api/blog-stats', async (req, res) => {
  try {
    const response = await axios.get('https://intent-kit-16.hasura.app/api/rest/blogs', {
      headers: {
        'x-hasura-admin-secret': '32qR4KmXOIpsGPQKMqEJHGJS27G5s7HdSKO3gdtQd2kv5e852SiYwWNfxkZOBuQ6'
      }
    });

    const analyticsData = processData(response.data);

    res.json({
      analytics: analyticsData
    });
  } catch (error) {
    console.error('Error fetching blog data:', error.message);

    // Handle errors (Step 5)
    res.status(500).json({ error: 'An error occurred while fetching blog data.' });
  }
});

app.get('/api/blog-search', (req, res) => {
  try {
    const query = req.query.query.toLowerCase();
    const filteredBlogs = data.filter(blog => _.includes(_.toLower(blog.title), query));

    res.json({
      results: filteredBlogs
    });
  } catch (error) {
    console.error('Error during blog search:', error.message);

    // Handle errors for blog search (Step 5)
    res.status(500).json({ error: 'An error occurred during blog search.' });
  }
});

const memoize = require('lodash.memoize');
const CACHE_DURATION = 600000; // Cache results for 10 minutes (in milliseconds)

const cachedProcessData = memoize(processData, () => 'cacheKey', { maxAge: CACHE_DURATION });
const cachedBlogSearch = memoize(blogSearch, () => 'cacheKey', { maxAge: CACHE_DURATION });

app.get('/api/blog-stats', async (req, res) => {
  try {
    const analyticsData = await cachedProcessData(data);
    res.json({
      analytics: analyticsData
    });
  } catch (error) {
    console.error('Error fetching blog data:', error.message);
    res.status(500).json({ error: 'An error occurred while fetching blog data.' });
  }
});

app.get('/api/blog-search', async (req, res) => {
  try {
    const query = req.query.query.toLowerCase();
    const filteredBlogs = await cachedBlogSearch(data, query);

    res.json({
      results: filteredBlogs
    });
  } catch (error) {
    console.error('Error during blog search:', error.message);
    res.status(500).json({ error: 'An error occurred during blog search.' });
  }
});

// Define a function to process data and perform analytics (Step 2)
function processData(data) {
  // Implement data processing and analytics using Lodash (Step 2)
}

// Define a function to perform blog search (original implementation)
async function blogSearch(data, query) {
  return data.filter(blog => _.includes(_.toLower(blog.title), query));
}





